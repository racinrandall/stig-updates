---
- name: "PRELIM | RHEL-08-010020 | RHEL-08-010140 | RHEL-08-010150 | Check whether machine is UEFI-based"
  stat:
      path: /sys/firmware/efi
  register: rhel_08_sys_firmware_efi
  
- name: "PRELIM | RHEL-08-010020 | Check if /boot or /boot/efi reside on separate partitions"
  shell: df --output=target /boot | tail -n 1
  args:
      warn: no
  changed_when: no
  check_mode: no
  register: rhel_08_boot_part

- name: remove unneeded audit rules before applying proper rules
  file:
    path: /etc/audit/rules.d
    state: absent

- name: create rules dir
  file:
    path: /etc/audit/rules.d
    state: directory

- name: Apply Audit Rules
  template:
    src: audit.rules.j2
    dest: /etc/audit/rules.d/audit.rules
  notify: restart_auditd

- name: "MEDIUM | RHEL-08-010130 | PATCH | RHEL 8 must employ FIPS 140-2 approved cryptographic hashing algorithms for all created passwords. | Add rounds argument"
  pamd:
      name: "{{ item }}"
      type: password
      control: sufficient
      module_path: pam_unix.so
      module_arguments: "rounds={{ rhel8stig_hashing_rounds }}"
      state: args_present
  with_items:
      - password-auth
      - system-auth

#- name: |
#        "HIGH | RHEL-08-010140 | PATCH | RHEL 8 operating systems booted with United Extensible Firmware Interface (UEFI) implemented must require authentication upon booting into single-user mode and maintenance."
#        "HIGH | RHEL-08-010150 | PATCH | RHEL 8 operating systems booted with a BIOS must require authentication upon booting into single-user and maintenance modes."
#  block:
#      # the createuser.cfg task is a workaround for the the ansible bug https://github.com/ansible/ansible/pull/59823
#      - name: |
#              "HIGH | RHEL-08-010140 | PATCH | RHEL 8 operating systems booted with United Extensible Firmware Interface (UEFI) implemented must require authentication upon booting into single-user mode and maintenance. | Create user.cfg"
#              "HIGH | RHEL-08-010150 | PATCH | RHEL 8 operating systems booted with a BIOS must require authentication upon booting into single-user and maintenance modes. | Create user.cfg"
#        shell: test -f {{ file_q }} && echo exists || {{ create_cmd }}
#        args:
#            warn: no
#        check_mode: "{{ ansible_check_mode is not defined }}"
#        register: rhel8stig_create_grub_user_cfg
#        changed_when:
#            - rhel8stig_create_grub_user_cfg.stdout == "created"
#        failed_when:
#            - rhel8stig_create_grub_user_cfg.stdout != "created"
#            - rhel8stig_create_grub_user_cfg.stdout != "exists"
#        vars:
#            file_q: "{{ (rhel8stig_grub_cfg_path | dirname ~ '/user.cfg') | quote }}"
#            create_cmd: "({{ ansible_check_mode | ternary('', 'touch ' ~ file_q ~ ' && ') }}echo created)"

#      - name: |
#              "HIGH | RHEL-08-010140 | PATCH | RHEL 8 operating systems booted with United Extensible Firmware Interface (UEFI) implemented must require authentication upon booting into single-user mode and maintenance. | Set Grub Password"
#              "HIGH | RHEL-08-010150 | PATCH | RHEL 8 operating systems booted with a BIOS must require authentication upon booting into single-user and maintenance modes. | Set Grub Password"
#        lineinfile:
#            path: "{{ rhel8stig_grub_cfg_path | dirname }}/user.cfg"
#            create: yes
#            regexp: ^GRUB2_PASSWORD=
#            line: GRUB2_PASSWORD={{ rhel8stig_bootloader_password_hash }}
#            owner: root
#            group: root
#            mode: 0640
#        notify: confirm grub2 user cfg

#      - name: |
#              "HIGH | RHEL-08-010140 | PATCH | RHEL 8 operating systems booted with United Extensible Firmware Interface (UEFI) implemented must require authentication upon booting into single-user mode and maintenance. | Set UEFI superusers"
#              "HIGH | RHEL-08-010150 | PATCH | RHEL 8 operating systems booted with a BIOS must require authentication upon booting into single-user and maintenance modes. | Set UEFI superusers"
#        lineinfile:
#            dest: "{{ rhel8stig_grub_cfg_path | dirname }}/grub.cfg"
#            regexp: '^set superusers'
#            line: 'set superusers="{{ rhel8stig_boot_superuser }}"'
#            insertafter: '### BEGIN /etc/grub.d/01_users ###'
#        notify: confirm grub2 user cfg

- name: "MEDIUM | RHEL-08-010160 | PATCH | The RHEL 8 pam_unix.so module must use a FIPS 140-2 approved cryptographic hashing algorithm for system authentication. | Add sha512 argument"
  pamd:
      name: "{{ item }}"
      type: password
      control: sufficient
      module_path: pam_unix.so
      module_arguments: sha512
      state: args_present
  with_items:
      - password-auth
      - system-auth

- name: "MEDIUM | RHEL-08-010200 | PATCH | RHEL 8 must be configured so that all network connections associated with SSH traffic are terminated at the end of the session or after 10 minutes of inactivity, except to fulfill documented and validated mission requirements."
  lineinfile:
      path: /etc/ssh/sshd_config
      regexp: "{{ item.regexp }}"
      line: "{{ item.line }}"
  notify: restart sshd
  with_items:
      - { regexp: '(?i)^#?ClientAliveInterval.*', line: 'ClientAliveInterval {{ rhel8stig_ssh_session_timeout }}'}
      - { regexp: '(?i)^#?ClientAliveCountMax.*', line: 'ClientAliveCountMax 0' }

- name: |
    "MEDIUM | RHEL-08-010290 | PATCH | The RHEL 8 SSH daemon must be configured to use only Message Authentication Codes (MACs) and ciphers employing FIPS 140-2 validated cryptographic hash algorithms."
    "MEDIUM | RHEL-08-010291 | PATCH | RHEL 8 must implement DoD-approved encryption to protect the confidentiality of SSH connections"
  block:
      - name: |
          "MEDIUM | RHEL-08-010290 | AUDIT | The RHEL 8 SSH daemon must be configured to use only Message Authentication Codes (MACs) and ciphers employing FIPS 140-2 validated cryptographic hash algorithms. | Get current FIPS mode state"
          "MEDIUM | RHEL-08-010291 | AUDIT | RHEL 8 must implement DoD-approved encryption to protect the confidentiality of SSH connections | Get current FIPS mode state"
        command: fips-mode-setup --check
        changed_when: false
        failed_when: false
        register: rhel_08_010290_pre_fips_check

      - name: |
          "MEDIUM | RHEL-08-010290 | PATCH | The RHEL 8 SSH daemon must be configured to use only Message Authentication Codes (MACs) and ciphers employing FIPS 140-2 validated cryptographic hash algorithms. | Enable FIPS"
          "MEDIUM | RHEL-08-010291 | PATCH | RHEL 8 must implement DoD-approved encryption to protect the confidentiality of SSH connections | Enable FIPS"
        command: fips-mode-setup --enable
        register: rhel_08_010290_fips_enable
        notify: reboot system
        when: '"disabled" in rhel_08_010290_pre_fips_check.stdout'

      - name: |
          "MEDIUM | RHEL-08-010290 | PATCH | The RHEL 8 SSH daemon must be configured to use only Message Authentication Codes (MACs) and ciphers employing FIPS 140-2 validated cryptographic hash algorithms. | Add ssh ciphers"
          "MEDIUM | RHEL-08-010291 | PATCH | RHEL 8 must implement DoD-approved encryption to protect the confidentiality of SSH connections | Add ssh ciphers"
        lineinfile:
            path: "{{ item.path }}"
            regexp: "{{ item.regexp }}"
            line: "{{ item.line }}"
        notify: reboot system
        with_items:
            - { path: /etc/crypto-policies/back-ends/openssh.config, regexp: '^MACs', line: "MACs {{ rhel8stig_ssh_macs_settings }}" }
            - { path: /etc/crypto-policies/back-ends/opensshserver.config, regexp: '^CRYPTO_POLICY=', line: "CRYPTO_POLICY='{{ rhel8stig_ssh_server_crypto_settings }}'" }

- name: "MEDIUM | RHEL-08-010295 | PATCH | The RHEL 8 operating system must implement DoD-approved TLS encryption in the GnuTLS package"
  lineinfile:
      path: /etc/crypto-policies/back-ends/gnutls.config
      regexp: '^(.*\+VERS-ALL:)'
      line: '\1{{ rhel8stig_gnutls_encryption }}'
      backrefs: true
      create: yes
      owner: root
      group: root
      mode: 0640
  notify: reboot system

- name: |
        "MEDIUM | RHEL-08-010300 | PATCH | RHEL 8 system commands must have mode 0755 or less permissive."
        "MEDIUM | RHEL-08-010310 | PATCH | RHEL 8 system commands must be owned by root."
        "MEDIUM | RHEL-08-010320 | PATCH | RHEL 8 system commands must be group-owned by root."
  block:
      - name: |
              "MEDIUM | RHEL-08-010300 | AUDIT | RHEL 8 system commands must have mode 0755 or less permissive. | Get commands less permissive"
              "MEDIUM | RHEL-08-010310 | AUDIT | RHEL 8 system commands must be owned by root. | Get commands not owned by root"
              "MEDIUM | RHEL-08-010320 | AUDIT | RHEL 8 system commands must be group-owned by root. | Get commands no group-owned by root"
        shell: "find -L /bin /sbin /usr/bin /usr/sbin /usr/local/bin /usr/local/sbin -perm /0022 -o ! -user root -o ! -group root"
        args:
            warn: no
        changed_when: false
        failed_when: false
        register: rhel_08_010300_commands

      - name: |
              "MEDIUM | RHEL-08-010300 | PATCH | RHEL 8 system commands must have mode 0755 or less permissive. | Set permissions"
              "MEDIUM | RHEL-08-010310 | PATCH | RHEL 8 system commands must be owned by root. | Set permissions"
              "MEDIUM | RHEL-08-010320 | PATCH | RHEL 8 system commands must be group-owned by root. | Set permissions"
        file:
            path: "{{ item }}"
            owner: root
            group: root
            mode: '0755'
            force: yes
        with_items:
            - "{{ rhel_08_010300_commands.stdout_lines }}"

- name: "MEDIUM | RHEL-08-010360 | PATCH | The RHEL 8 file integrity tool must notify the system administrator when changes to the baseline configuration or anomalies in the operation of any security functions are discovered within an organizationally defined frequency."
  cron:
      name: 'Run AIDE integrity check {{ rhel8stig_aide_cron.special_time }}'
      user: "{{ rhel8stig_aide_cron.user }}"
      cron_file: "{{ rhel8stig_aide_cron.cron_file }}"
      job: "{{ rhel8stig_aide_cron.job + ((rhel8stig_aide_cron.notify_by_mail) | ternary(rhel8stig_aide_cron.notify_cmd,'')) }}"
      minute: "{{ rhel8stig_aide_cron.minute | default((rhel8stig_cron_special_disable and
              rhel8stig_aide_cron.special_time in ['hourly', 'daily', 'weekly', 'monthly']) |
              ternary('0', omit)) | default(omit) }}"
      hour: "{{ rhel8stig_aide_cron.hour | default((rhel8stig_cron_special_disable and
              rhel8stig_aide_cron.special_time in ['daily', 'weekly', 'monthly']) |
              ternary('0', omit)) | default(omit) }}"
      weekday: "{{ rhel8stig_aide_cron.weekday | default((rhel8stig_cron_special_disable and
              rhel8stig_aide_cron.special_time in ['weekly']) |
              ternary('0', omit)) | default(omit) }}"
      day: "{{ rhel8stig_aide_cron.day | default((rhel8stig_cron_special_disable and
              rhel8stig_aide_cron.special_time in ['monthly']) |
              ternary('1', omit)) | default(omit) }}"
      special_time: "{{ (rhel8stig_cron_special_disable and
              rhel8stig_aide_cron.special_time in ['hourly', 'daily', 'weekly', 'monthly']) |
              ternary(omit, rhel8stig_aide_cron.special_time) }}"

- name: "HIGH | RHEL-08-010371 | PATCH | RHEL 8 must prevent the installation of software, patches, service packs, device drivers, or operating system components of local packages without verification they have been digitally signed using a certificate that is issued by a Certificate Authority (CA) that is recognized and approved by the organization."
  lineinfile:
      path: /etc/dnf/dnf.conf
      regexp: '^localpkg_gpgcheck='
      line: localpkg_gpgcheck=True

- name: "MEDIUM | RHEL-08-010390 | PATCH | RHEL 8 must have the packages required for multifactor authentication installed."
  block:
      - name: "MEDIUM | RHEL-08-010390 | PATCH | RHEL 8 must have the packages required for multifactor authentication installed. | Install GUI related packages"
        dnf:
            name: esc
            state: present

      - name: "MEDIUM | RHEL-08-010390 | PATCH | RHEL 8 must have the packages required for multifactor authentication installed. | Install non-GUI related packages"
        dnf:
            name: openssl-pkcs11
            state: present

- name: "MEDIUM | RHEL-08-010410 | PATCH | RHEL 8 must accept Personal Identity Verification (PIV) credentials."
  dnf:
      name: opensc
      state: present

- name: "MEDIUM | RHEL-08-010421 | PATCH | RHEL 8 must clear the page allocator to prevent use-after-free attacks."
  block:
      - name: "MEDIUM | RHEL-08-010421 | AUDIT | RHEL 8 must clear the page allocator to prevent use-after-free attacks. | Get GRUB_CMDLINE_LINUX settings"
        shell: grep GRUB_CMDLINE_LINUX= /etc/default/grub | cut -f2 -d'"'
        args:
            warn: no
        changed_when: false
        failed_when: false
        register: rhel8stig_010421_grub_cmdline_linux

      - name: "MEDIUM | RHEL-08-010421 | PATCH | RHEL 8 must clear the page allocator to prevent use-after-free attacks. | Set page poison 1 as active"
        shell: grubby --update-kernel=ALL --args="page_poison=1"

      - name: "MEDIUM | RHEL-08-010421 | PATCH | RHEL 8 must clear the page allocator to prevent use-after-free attacks. | Set page poison 1 for kernel updates if doesn't exist"
        lineinfile:
            path: /etc/default/grub
            regexp: '^GRUB_CMDLINE_LINUX='
            line: 'GRUB_CMDLINE_LINUX="{{ rhel8stig_010421_grub_cmdline_linux.stdout }} page_poison=1"'
        when: '"page_poison=" not in rhel8stig_010421_grub_cmdline_linux.stdout'

      - name: "MEDIUM | RHEL-08-010421 | PATCH | RHEL 8 must clear the page allocator to prevent use-after-free attacks. | Set page poison 1 for kernel updates if exists"
        replace:
            path: /etc/default/grub
            regexp: 'page_poison=([^\s|"])+'
            replace: "page_poison=1"
        when: '"page_poison=" in rhel8stig_010421_grub_cmdline_linux.stdout'

- name: "MEDIUM | RHEL-08-010422 | PATCH | RHEL 8 must disable virtual syscalls."
  block:
      - name: "MEDIUM | RHEL-08-010422 | AUDIT | RHEL 8 must disable virtual syscalls. | Get GRUB_CMDLINE_LINUX settings"
        shell: grep GRUB_CMDLINE_LINUX= /etc/default/grub | cut -f2 -d'"'
        args:
            warn: no
        changed_when: false
        failed_when: false
        register: rhel8stig_010422_grub_cmdline_linux

      - name: "MEDIUM | RHEL-08-010422 | PATCH | RHEL 8 must disable virtual syscalls. | Set vsyscall none as active"
        shell: grubby --update-kernel=ALL --args="vsyscall=none"

      - name: "MEDIUM | RHEL-08-010422 | PATCH | RHEL 8 must disable virtual syscalls. | Set vsyscall none for kernel updates if doesn't exist"
        lineinfile:
            path: /etc/default/grub
            regexp: '^GRUB_CMDLINE_LINUX='
            line: 'GRUB_CMDLINE_LINUX="{{ rhel8stig_010422_grub_cmdline_linux.stdout }} vsyscall=none"'
        when: '"vsyscall=" not in rhel8stig_010422_grub_cmdline_linux.stdout'

      - name: "MEDIUM | RHEL-08-010422 | PATCH | RHEL 8 must disable virtual syscalls. | Set vsyscall none for kernel updates if exists"
        replace:
            path: /etc/default/grub
            regexp: 'vsyscall=([^\s|"])+'
            replace: "vsyscall=none"
        when: '"vsyscall=" in rhel8stig_010422_grub_cmdline_linux.stdout'

- name: "MEDIUM | RHEL-08-010423 | PATCH | RHEL 8 must clear SLUB/SLAB objects to prevent use-after-free attacks."
  block:
      - name: "MEDIUM | RHEL-08-010423 | PATCH | RHEL 8 must clear SLUB/SLAB objects to prevent use-after-free attacks. | Get GRUB_CMDLINE_LINUX settings"
        shell: grep GRUB_CMDLINE_LINUX= /etc/default/grub | cut -f2 -d'"'
        args:
            warn: no
        changed_when: false
        failed_when: false
        register: rhel8stig_010423_grub_cmdline_linux

      - name: "MEDIUM | RHEL-08-010423 | PATCH | RHEL 8 must clear SLUB/SLAB objects to prevent use-after-free attacks. | Set slub_debug to P as active"
        shell: grubby --update-kernel=ALL --args="slub_debug=P"

      - name: "MEDIUM | RHEL-08-010423 | PATCH | RHEL 8 must clear SLUB/SLAB objects to prevent use-after-free attacks. | Set slub_debug to P for kernel updates if doesn't exist"
        lineinfile:
            path: /etc/default/grub
            regexp: '^GRUB_CMDLINE_LINUX='
            line: 'GRUB_CMDLINE_LINUX="{{ rhel8stig_010423_grub_cmdline_linux.stdout }} slub_debug=P"'
        when: '"slub_debug=" not in rhel8stig_010423_grub_cmdline_linux.stdout'

      - name: "MEDIUM | RHEL-08-010423 | PATCH | RHEL 8 must clear SLUB/SLAB objects to prevent use-after-free attacks. | Set slub_debug to P for kernel updates if exists"
        replace:
            path: /etc/default/grub
            regexp: 'slub_debug=([^\s|"])+'
            replace: "slub_debug=P"
        when: '"slub_debug=" in rhel8stig_010423_grub_cmdline_linux.stdout'

- name: "MEDIUM | RHEL-08-010510 | PATCH | The RHEL 8 SSH daemon must not allow compression or must only allow compression after successful authentication."
  lineinfile:
      path: /etc/ssh/sshd_config
      regexp: '(?i)^#?Compression'
      line: 'Compression {{ rhel8stig_sshd_compression }}'
  notify: restart sshd

- name: "MEDIUM | RHEL-08-010520 | PATCH | The RHEL 8 SSH daemon must not allow authentication using known host’s authentication."
  lineinfile:
      path: /etc/ssh/sshd_config
      regexp: '(?i)^#?IgnoreUserKnownHosts'
      line: 'IgnoreUserKnownHosts yes'
  notify: restart sshd

- name: "MEDIUM | RHEL-08-010580 | PATCH | RHEL 8 must prevent special devices on non-root local partitions."
  block:
      - name: "MEDIUM | RHEL-08-010580 | PATCH | RHEL 8 must prevent special devices on non-root local partitions. | Get mounts"
        shell: mount | grep '^/dev\S* on /\S' | grep --invert-match 'nodev' | awk '{print $1,$3,$5,$6}' | sed 's/[()]//g'
        args:
            warn: no
        changed_when: no
        check_mode: no
        register: rhel8stig_010580_mounts_nodev

      - name: "MEDIUM | RHEL-08-010580 | PATCH | RHEL 8 must prevent special devices on non-root local partitions. | Split results"
        set_fact:
            rhel8stig_010580_mounts: "{{ rhel8stig_010580_mounts_nodev.stdout_lines | map('regex_replace', ld_mount_regex, ld_mount_yaml) | map('from_yaml') | list }}"

        with_items: "{{ rhel8stig_010580_mounts_nodev.stdout_lines }}"
        vars:
            ld_mount_regex: >-
                ^(?P<device>[^'']*)\s(?P<mpoint>[^'']*)\s(?P<fs>[^'']*)\s(?P<opts>[^'']*)
            ld_mount_yaml: |
                device: >-4
                    \g<device>
                mpoint: >-4
                    \g<mpoint>
                fs: >-4
                    \g<fs>
                opts: >-4
                    \g<opts>
        when: rhel8stig_010580_mounts_nodev.stdout | length > 0

      - name: "MEDIUM | RHEL-08-010580 | PATCH | RHEL 8 must prevent special devices on non-root local partitions. | Set value"
        mount:
            path: "{{ item.mpoint }}"
            state: mounted
            src: "{{ item.device }}"
            fstype: "{{ item.fs }}"
            opts: "{{ item.opts }},nodev"
        with_items:
            - "{{ rhel8stig_010580_mounts | default([]) }}"
        when:
            - item.device != "/"
            - "'odev' not in item.opts"
            - rhel8stig_010580_mounts_nodev.stdout | length > 0

- name: "MEDIUM | RHEL-08-010590 | PATCH | RHEL 8 must prevent code from being executed on file systems that contain user home directories."
  mount:
      path: /home
      state: mounted
      src: "{{ home_mount.device }}"
      fstype: "{{ home_mount.fstype }}"
      opts: "{{ home_mount.options }},noexec"

- name: "MEDIUM | RHEL-08-010670 | PATCH | RHEL 8 must disable kernel dumps unless needed."
  service:
      name: kdump
      enabled: no
      state: stopped

- name: "MEDIUM | RHEL-08-010830 | PATCH |Unattended or automatic logon to RHEL 8 via ssh must not be allowed."
  lineinfile:
      path: /etc/ssh/sshd_config
      regexp: '(?i)^#?PermitUserEnvironment'
      line: 'PermitUserEnvironment no'
  notify: restart sshd

- name: "MEDIUM | RHEL-020011 | PATCH | RHEL 8 must automatically lock an account when three unsuccessful logon attempts occur."
  block:
      - name: "MEDIUM | RHEL-020011 | PATCH | RHEL 8 must automatically lock an account when three unsuccessful logon attempts occur. | Set preauth"
        lineinfile:
            path: "/etc/pam.d/{{ item }}"
            regexp: '^auth       required pam_faillock.so preauth'
            line: "auth       required pam_faillock.so preauth dir=/var/log/faillock silent audit deny={{ rhel8stig_pam_faillock.attempts }}{{ (rhel8stig_pam_faillock.fail_for_root) | ternary(' even_deny_root ',' ') }}fail_interval={{ rhel8stig_pam_faillock.interval }} unlock_time={{ rhel8stig_pam_faillock.unlock_time }}"
            insertafter: '^auth'
        notify: restart sssd
        with_items:
            - system-auth
            - password-auth

      - name: "MEDIUM | RHEL-020011 | PATCH | RHEL 8 must automatically lock an account when three unsuccessful logon attempts occur. | Set authfail"
        lineinfile:
            path: "/etc/pam.d/{{ item }}"
            regexp: '^auth       required pam_faillock.so authfail'
            line: 'auth       required pam_faillock.so authfail dir=/var/log/faillock unlock_time={{ rhel8stig_pam_faillock.unlock_time }}'
            insertafter: '^auth'
        notify: restart sssd
        with_items:
            - system-auth
            - password-auth

      - name: "MEDIUM | RHEL-020011 | PATCH | RHEL 8 must automatically lock an account when three unsuccessful logon attempts occur. | Set account faillock"
        lineinfile:
            path: "/etc/pam.d/{{ item }}"
            regexp: '^account    required pam_faillock.so'
            line: 'account    required pam_faillock.so'
            insertafter: '^account'
        notify: restart sssd
        with_items:
            - system-auth
            - password-auth

      - name: "MEDIUM | RHEL-020011 | PATCH | RHEL 8 must automatically lock an account when three unsuccessful logon attempts occur. | Set deny in faillock.conf"
        lineinfile:
            path: "/etc/security/faillock.conf"
            regexp: '^deny =|^\# deny ='
            line: "deny = {{ rhel8stig_pam_faillock.attempts }}"

- name: "MEDIUM | RHEL-020013 | PATCH | RHEL 8 must automatically lock an account when three unsuccessful logon attempts occur during a 15-minute time period."
  block:
      - name: "MEDIUM | RHEL-020013 | PATCH | RHEL 8 must automatically lock an account when three unsuccessful logon attempts occur during a 15-minute time period. | Set preauth"
        lineinfile:
            path: "/etc/pam.d/{{ item }}"
            regexp: '^auth       required pam_faillock.so preauth'
            line: "auth       required pam_faillock.so preauth dir=/var/log/faillock silent audit deny={{ rhel8stig_pam_faillock.attempts }}{{ (rhel8stig_pam_faillock.fail_for_root) | ternary(' even_deny_root ',' ') }}fail_interval={{ rhel8stig_pam_faillock.interval }} unlock_time={{ rhel8stig_pam_faillock.unlock_time }}"
            insertafter: '^auth'
        notify: restart sssd
        with_items:
            - system-auth
            - password-auth

      - name: "MEDIUM | RHEL-020013 | PATCH | RHEL 8 must automatically lock an account when three unsuccessful logon attempts occur during a 15-minute time period. | Set authfail"
        lineinfile:
            path: "/etc/pam.d/{{ item }}"
            regexp: '^auth       required pam_faillock.so authfail'
            line: 'auth       required pam_faillock.so authfail dir=/var/log/faillock unlock_time={{ rhel8stig_pam_faillock.unlock_time }}'
            insertafter: '^auth'
        notify: restart sssd
        with_items:
            - system-auth
            - password-auth

      - name: "MEDIUM | RHEL-020013 | PATCH | RHEL 8 must automatically lock an account when three unsuccessful logon attempts occur during a 15-minute time period. | Set account faillock"
        lineinfile:
            path: "/etc/pam.d/{{ item }}"
            regexp: '^account    required pam_faillock.so'
            line: 'account    required pam_faillock.so'
            insertafter: '^account'
        notify: restart sssd
        with_items:
            - system-auth
            - password-auth

      - name: "MEDIUM | RHEL-020013 | PATCH | RHEL 8 must automatically lock an account when three unsuccessful logon attempts occur during a 15-minute time period. | Set fail_interval in faillock.conf"
        lineinfile:
            path: "/etc/security/faillock.conf"
            regexp: '^fail_interval =|^\# fail_interval ='
            line: "fail_interval = {{ rhel8stig_pam_faillock.interval }}"
        with_items:
            - system-auth
            - password-auth

- name: "MEDIUM | RHEL-020015 | PATCH | RHEL 8 must automatically lock an account until the locked account is released by an administrator when three unsuccessful logon attempts occur during a 15-minute time period."
  block:
      - name: "MEDIUM | RHEL-020015 | PATCH | RHEL 8 must automatically lock an account until the locked account is released by an administrator when three unsuccessful logon attempts occur during a 15-minute time period. | Set preauth"
        lineinfile:
            path: "/etc/pam.d/{{ item }}"
            regexp: '^auth       required pam_faillock.so preauth'
            line: "auth       required pam_faillock.so preauth dir=/var/log/faillock silent audit deny={{ rhel8stig_pam_faillock.attempts }}{{ (rhel8stig_pam_faillock.fail_for_root) | ternary(' even_deny_root ',' ') }}fail_interval={{ rhel8stig_pam_faillock.interval }} unlock_time={{ rhel8stig_pam_faillock.unlock_time }}"
            insertafter: '^auth'
        notify: restart sssd
        with_items:
            - system-auth
            - password-auth

      - name: "MEDIUM | RHEL-020015 | PATCH |RHEL 8 must automatically lock an account until the locked account is released by an administrator when three unsuccessful logon attempts occur during a 15-minute time period. | Set authfail"
        lineinfile:
            path: "/etc/pam.d/{{ item }}"
            regexp: '^auth       required pam_faillock.so authfail'
            line: 'auth       required pam_faillock.so authfail dir=/var/log/faillock unlock_time={{ rhel8stig_pam_faillock.unlock_time }}'
            insertafter: '^auth'
        notify: restart sssd
        with_items:
            - system-auth
            - password-auth

      - name: "MEDIUM | RHEL-020015 | PATCH | RHEL 8 must automatically lock an account until the locked account is released by an administrator when three unsuccessful logon attempts occur during a 15-minute time period. | Set account faillock"
        lineinfile:
            path: "/etc/pam.d/{{ item }}"
            regexp: '^account    required pam_faillock.so'
            line: 'account    required pam_faillock.so'
            insertafter: '^account'
        notify: restart sssd
        with_items:
            - system-auth
            - password-auth

      - name: "MEDIUM | RHEL-020015 | PATCH | RHEL 8 must automatically lock an account when three unsuccessful logon attempts occur during a 15-minute time period. | Set unlock_time in faillock.conf"
        lineinfile:
            path: "/etc/security/faillock.conf"
            regexp: '^unlock_time =|^\# unlock_time ='
            line: "unlock_time = {{ rhel8stig_pam_faillock.unlock_time }}"
        with_items:
            - system-auth
            - password-auth

- name: "MEDIUM | RHEL-020017 | PATCH | RHEL 8 must ensure account lockouts persist."
  block:
      - name: "MEDIUM | RHEL-020017 | PATCH | RHEL 8 must ensure account lockouts persist. | Set preauth"
        lineinfile:
            path: "/etc/pam.d/{{ item }}"
            regexp: '^auth       required pam_faillock.so preauth'
            line: "auth       required pam_faillock.so preauth dir=/var/log/faillock silent audit deny={{ rhel8stig_pam_faillock.attempts }}{{ (rhel8stig_pam_faillock.fail_for_root) | ternary(' even_deny_root ',' ') }}fail_interval={{ rhel8stig_pam_faillock.interval }} unlock_time={{ rhel8stig_pam_faillock.unlock_time }}"
            insertafter: '^auth'
        notify: restart sssd
        with_items:
            - system-auth
            - password-auth

      - name: "MEDIUM | RHEL-020017 | PATCH | RHEL 8 must ensure account lockouts persist. | Set authfail"
        lineinfile:
            path: "/etc/pam.d/{{ item }}"
            regexp: '^auth       required pam_faillock.so authfail'
            line: 'auth       required pam_faillock.so authfail dir=/var/log/faillock unlock_time={{ rhel8stig_pam_faillock.unlock_time }}'
            insertafter: '^auth'
        notify: restart sssd
        with_items:
            - system-auth
            - password-auth

      - name: "MEDIUM | RHEL-020017 | PATCH | RHEL 8 must ensure account lockouts persist. | Set account faillock"
        lineinfile:
            path: "/etc/pam.d/{{ item }}"
            regexp: '^account    required pam_faillock.so'
            line: 'account    required pam_faillock.so'
            insertafter: '^account'
        notify: restart sssd
        with_items:
            - system-auth
            - password-auth

      - name: "MEDIUM | RHEL-020017 | PATCH | RHEL 8 must ensure account lockouts persist. | Set dir in faillock.conf"
        lineinfile:
            path: "/etc/security/faillock.conf"
            regexp: '^dir =|^\# dir ='
            line: "dir = /var/log/faillock"
        with_items:
            - system-auth
            - password-auth

- name: "MEDIUM | RHEL-020019| PATCH | RHEL 8 must prevent system messages from being presented when three unsuccessful logon attempts occur."
  block:
      - name: "MEDIUM | RHEL-020019 | PATCH | RHEL 8 must prevent system messages from being presented when three unsuccessful logon attempts occur. | Set preauth"
        lineinfile:
            path: "/etc/pam.d/{{ item }}"
            regexp: '^auth       required pam_faillock.so preauth'
            line: "auth       required pam_faillock.so preauth dir=/var/log/faillock silent audit deny={{ rhel8stig_pam_faillock.attempts }}{{ (rhel8stig_pam_faillock.fail_for_root) | ternary(' even_deny_root ',' ') }}fail_interval={{ rhel8stig_pam_faillock.interval }} unlock_time={{ rhel8stig_pam_faillock.unlock_time }}"
            insertafter: '^auth'
        notify: restart sssd
        with_items:
            - system-auth
            - password-auth

      - name: "MEDIUM | RHEL-020019 | PATCH | RHEL 8 must prevent system messages from being presented when three unsuccessful logon attempts occur. | Set authfail"
        lineinfile:
            path: "/etc/pam.d/{{ item }}"
            regexp: '^auth       required pam_faillock.so authfail'
            line: 'auth       required pam_faillock.so authfail dir=/var/log/faillock unlock_time={{ rhel8stig_pam_faillock.unlock_time }}'
            insertafter: '^auth'
        notify: restart sssd
        with_items:
            - system-auth
            - password-auth

      - name: "MEDIUM | RHEL-020019 | PATCH | RHEL 8 must prevent system messages from being presented when three unsuccessful logon attempts occur. | Set account faillock"
        lineinfile:
            path: "/etc/pam.d/{{ item }}"
            regexp: '^account    required pam_faillock.so'
            line: 'account    required pam_faillock.so'
            insertafter: '^account'
        notify: restart sssd
        with_items:
            - system-auth
            - password-auth

      - name: "MEDIUM | RHEL-020019 | PATCH | RHEL 8 must prevent system messages from being presented when three unsuccessful logon attempts occur. | Set silent in faillock.conf"
        lineinfile:
            path: "/etc/security/faillock.conf"
            regexp: '^silent|^\# silent'
            line: "silent"
        with_items:
            - system-auth
            - password-auth

- name: "MEDIUM | RHEL-020020 | PATCH | RHEL 8 must log user name information when unsuccessful logon attempts occur."
  block:
      - name: "MEDIUM | RHEL-020018 | PATCH | RHEL 8 must log user name information when unsuccessful logon attempts occur. | Set preauth"
        lineinfile:
            path: "/etc/pam.d/{{ item }}"
            regexp: '^auth       required pam_faillock.so preauth'
            line: "auth       required pam_faillock.so preauth dir=/var/log/faillock silent audit deny={{ rhel8stig_pam_faillock.attempts }}{{ (rhel8stig_pam_faillock.fail_for_root) | ternary(' even_deny_root ',' ') }}fail_interval={{ rhel8stig_pam_faillock.interval }} nlock_time={{ rhel8stig_pam_faillock.unlock_time }}"
            insertafter: '^auth'
        notify: restart sssd
        with_items:
            - system-auth
            - password-auth

      - name: "MEDIUM | RHEL-020020 | PATCH | RHEL 8 must log user name information when unsuccessful logon attempts occur. | Set authfail"
        lineinfile:
            path: "/etc/pam.d/{{ item }}"
            regexp: '^auth       required pam_faillock.so authfail'
            line: 'auth       required pam_faillock.so authfail dir=/var/log/faillock nlock_time={{ rhel8stig_pam_faillock.unlock_time }}'
            insertafter: '^auth'
        notify: restart sssd
        with_items:
            - system-auth
            - password-auth

      - name: "MEDIUM | RHEL-020020 | PATCH | RHEL 8 must log user name information when unsuccessful logon attempts occur. | Set account faillock"
        lineinfile:
            path: "/etc/pam.d/{{ item }}"
            regexp: '^account    required pam_faillock.so'
            line: 'account    required pam_faillock.so'
            insertafter: '^account'
        notify: restart sssd
        with_items:
            - system-auth
            - password-auth

- name: "MEDIUM | RHEL-020021| PATCH | RHEL 8 must log user name information when unsuccessful logon attempts occur."
  block:
      - name: "MEDIUM | RHEL-020021 | PATCH | RHEL 8 must log user name information when unsuccessful logon attempts occur. | Set preauth"
        lineinfile:
            path: "/etc/pam.d/{{ item }}"
            regexp: '^auth       required pam_faillock.so preauth'
            line: "auth       required pam_faillock.so preauth dir=/var/log/faillock silent audit deny={{ rhel8stig_pam_faillock.attempts }}{{ (rhel8stig_pam_faillock.fail_for_root) | ternary(' even_deny_root ',' ') }}fail_interval={{ rhel8stig_pam_faillock.interval }} unlock_time={{ rhel8stig_pam_faillock.unlock_time }}"
            insertafter: '^auth'
        notify: restart sssd
        with_items:
            - system-auth
            - password-auth

      - name: "MEDIUM | RHEL-020021 | PATCH | RHEL 8 must log user name information when unsuccessful logon attempts occur. | Set authfail"
        lineinfile:
            path: "/etc/pam.d/{{ item }}"
            regexp: '^auth       required pam_faillock.so authfail'
            line: 'auth       required pam_faillock.so authfail dir=/var/log/faillock unlock_time={{ rhel8stig_pam_faillock.unlock_time }}'
            insertafter: '^auth'
        notify: restart sssd
        with_items:
            - system-auth
            - password-auth

      - name: "MEDIUM | RHEL-020021 | PATCH | RHEL 8 must log user name information when unsuccessful logon attempts occur. | Set account faillock"
        lineinfile:
            path: "/etc/pam.d/{{ item }}"
            regexp: '^account    required pam_faillock.so'
            line: 'account    required pam_faillock.so'
            insertafter: '^account'
        notify: restart sssd
        with_items:
            - system-auth
            - password-auth

      - name: "MEDIUM | RHEL-020021 | PATCH | RHEL 8 must log user name information when unsuccessful logon attempts occur. | Set audit in faillock.conf"
        lineinfile:
            path: "/etc/security/faillock.conf"
            regexp: '^audit|^\# audit'
            line: "audit"
        with_items:
            - system-auth
            - password-auth

- name: "MEDIUM | RHEL-020023| PATCH | RHEL 8 must include root when automatically locking an account until the locked account is released by an administrator when three unsuccessful logon attempts occur during a 15-minute time period."
  block:
      - name: "MEDIUM | RHEL-020023 | PATCH | RHEL 8 must include root when automatically locking an account until the locked account is released by an administrator when three unsuccessful logon attempts occur during a 15-minute time period. | Set preauth"
        lineinfile:
            path: "/etc/pam.d/{{ item }}"
            regexp: '^auth       required pam_faillock.so preauth'
            line: "auth       required pam_faillock.so preauth dir=/var/log/faillock silent audit deny={{ rhel8stig_pam_faillock.attempts }}{{ (rhel8stig_pam_faillock.fail_for_root) | ternary(' even_deny_root ',' ') }}fail_interval={{ rhel8stig_pam_faillock.interval }} unlock_time={{ rhel8stig_pam_faillock.unlock_time }}"
            insertafter: '^auth'
        notify: restart sssd
        with_items:
            - system-auth
            - password-auth

      - name: "MEDIUM | RHEL-020023 | PATCH | RHEL 8 must include root when automatically locking an account until the locked account is released by an administrator when three unsuccessful logon attempts occur during a 15-minute time period. | Set authfail"
        lineinfile:
            path: "/etc/pam.d/{{ item }}"
            regexp: '^auth       required pam_faillock.so authfail'
            line: 'auth       required pam_faillock.so authfail dir=/var/log/faillock unlock_time={{ rhel8stig_pam_faillock.unlock_time }}'
            insertafter: '^auth'
        notify: restart sssd
        with_items:
            - system-auth
            - password-auth

      - name: "MEDIUM | RHEL-020023 | PATCH | RHEL 8 must include root when automatically locking an account until the locked account is released by an administrator when three unsuccessful logon attempts occur during a 15-minute time period. | Set account faillock"
        lineinfile:
            path: "/etc/pam.d/{{ item }}"
            regexp: '^account    required pam_faillock.so'
            line: 'account    required pam_faillock.so'
            insertafter: '^account'
        notify: restart sssd
        with_items:
            - system-auth
            - password-auth

      - name: "MEDIUM | RHEL-020023 | PATCH | RHEL 8 must include root when automatically locking an account until the locked account is released by an administrator when three unsuccessful logon attempts occur during a 15-minute time period. | Set audit in faillock.conf"
        lineinfile:
            path: "/etc/security/faillock.conf"
            regexp: '^even_deny_root|^\# even_deny_root'
            line: "even_deny_root"
        with_items:
            - system-auth
            - password-auth

- name: "MEDIUM | RHEL-08-020050 | PATCH | RHEL 8 must be able to initiate directly a session lock for all connection types using smartcard when the smartcard is removed."
  block:
      - name: "MEDIUM | RHEL-08-020050 | AUDIT | RHEL 8 must be able to initiate directly a session lock for all connection types using smartcard when the smartcard is removed. | Find removal-action param"
        shell: 'grep "removal-action=" /etc/dconf/db/* -R | cut -f1 -d:'
        args:
            warn: no
        changed_when: false
        failed_when: false
        register: rhel_08_020050_removal_action

      - name: "MEDIUM | RHEL-08-020050 | AUDIT | RHEL 8 must be able to initiate directly a session lock for all connection types using smartcard when the smartcard is removed. | Find removal-action param"
        shell: "grep removal-action= /etc/dconf/db/* -R | cut -f1 -d: | sed 's:.*/::'"
        changed_when: false
        failed_when: false
        register: rhel_08_020050_removal_action_file

      - name: "MEDIUM | RHEL-08-020050 | PATCH | RHEL 8 must be able to initiate directly a session lock for all connection types using smartcard when the smartcard is removed. | Set removal-action param if doesn't exist"
        lineinfile:
            path: /etc/dconf/db/distro.d/20-authselect
            create: yes
            owner: root
            group: root
            mode: 0644
            line: |
                [org/gnome/settings-daemon/peripherals/smartcard]
                removal-action='lock-screen'
        when: rhel_08_020050_removal_action.stdout | length == 0
        notify: dconf update

      - name: "MEDIUM | RHEL-08-020050 | PATCH | RHEL 8 must be able to initiate directly a session lock for all connection types using smartcard when the smartcard is removed. | Update removal-action if exists"
        lineinfile:
            path: "{{ rhel_08_020050_removal_action.stdout }}"
            regexp: ^removal-action=
            line: removal-action='lock-screen'
        when: rhel_08_020050_removal_action.stdout | length > 0
        notify: dconf update

      - name: "MEDIUM | RHEL-08-020050 | PATCH | RHEL 8 must be able to initiate directly a session lock for all connection types using smartcard when the smartcard is removed. | Set smartcard section of db"
        lineinfile:
            path: '/etc/dconf/db/distro.d/locks/{{ rhel_08_020050_removal_action_file.stdout }}'
            line: /org/gnome/settings-daemon/peripherals/smartcard/removal-action
        when: rhel_08_020050_removal_action_file.stdout | length > 0
        notify: dconf update

      - name: "MEDIUM | RHEL-08-020050 | PATCH | RHEL 8 must be able to initiate directly a session lock for all connection types using smartcard when the smartcard is removed. | Set smartcard section of db"
        lineinfile:
            path: /etc/dconf/db/distro.d/locks/20-authselect
            create: yes
            line: /org/gnome/settings-daemon/peripherals/smartcard/removal-action
            owner: root
            group: root
            mode: 0640
        when: rhel_08_020050_removal_action_file.stdout | length == 0
        notify: dconf update

- name: "MEDIUM | RHEL-08-020100 | PATCH RHEL 8 must ensure a password complexity module is enabled."
  lineinfile:
      path: "{{ item.path }}"
      regexp: "{{ item.regexp }}"
      line: "{{ item.line }}"
      insertafter: '^password'
      owner: root
      group: root
      mode: 0640
  with_items:
      - { path: /etc/pam.d/system-auth, regexp: '^password   required pam_pwquality.so', line: 'password   required pam_pwquality.so retry=3' }
      - { path: /etc/pam.d/password-auth, regexp: '^password   required pam_pwquality.so', line: 'password   required pam_pwquality.so retry=3' }

